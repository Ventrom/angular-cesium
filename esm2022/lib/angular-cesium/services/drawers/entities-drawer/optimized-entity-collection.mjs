export class OptimizedEntityCollection {
    constructor(entityCollection, collectionSize = -1, updateRate = -1) {
        this.entityCollection = entityCollection;
        this._isSuspended = false;
        this._isHardSuspend = false;
        this._updateRate = updateRate;
        this._collectionSize = collectionSize;
    }
    setShow(show) {
        this.entityCollection.show = show;
    }
    get isSuspended() {
        return this._isSuspended;
    }
    get updateRate() {
        return this._updateRate;
    }
    set updateRate(value) {
        this._updateRate = value;
    }
    get collectionSize() {
        return this._collectionSize;
    }
    set collectionSize(value) {
        this._collectionSize = value;
    }
    collection() {
        return this.entityCollection;
    }
    isFree() {
        return this._collectionSize < 1 || this.entityCollection.values.length < this._collectionSize;
    }
    add(entity) {
        this.suspend();
        return this.entityCollection.add(entity);
    }
    remove(entity) {
        this.suspend();
        return this.entityCollection.remove(entity);
    }
    removeNoSuspend(entity) {
        this.entityCollection.remove(entity);
    }
    removeAll() {
        this.suspend();
        this.entityCollection.removeAll();
    }
    onEventSuspension(callback, once = false) {
        this._onEventSuspensionCallback = { callback, once };
        return () => {
            this._onEventSuspensionCallback = undefined;
        };
    }
    onEventResume(callback, once = false) {
        this._onEventResumeCallback = { callback, once };
        if (!this._isSuspended) {
            this.triggerEventResume();
        }
        return () => {
            this._onEventResumeCallback = undefined;
        };
    }
    triggerEventSuspension() {
        if (this._onEventSuspensionCallback !== undefined) {
            const callback = this._onEventSuspensionCallback.callback;
            if (this._onEventSuspensionCallback.once) {
                this._onEventSuspensionCallback = undefined;
            }
            callback();
        }
    }
    triggerEventResume() {
        if (this._onEventResumeCallback !== undefined) {
            const callback = this._onEventResumeCallback.callback;
            if (this._onEventResumeCallback.once) {
                this._onEventResumeCallback = undefined;
            }
            callback();
        }
    }
    suspend() {
        if (this._updateRate < 0) {
            return;
        }
        if (this._isHardSuspend) {
            return;
        }
        if (!this._isSuspended) {
            this._isSuspended = true;
            this.entityCollection.suspendEvents();
            this.triggerEventSuspension();
            this._suspensionTimeout = setTimeout(() => {
                this.entityCollection.resumeEvents();
                this.triggerEventResume();
                this._isSuspended = false;
                this._suspensionTimeout = undefined;
            }, this._updateRate);
        }
    }
    hardSuspend() {
        this.entityCollection.suspendEvents();
        this._isHardSuspend = true;
    }
    hardResume() {
        this.entityCollection.resumeEvents();
        this._isHardSuspend = false;
    }
}
//# sourceMappingURL=data:application/json;base64,