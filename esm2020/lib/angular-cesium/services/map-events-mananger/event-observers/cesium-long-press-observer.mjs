import { merge, of as observableOf } from 'rxjs';
import { delay, mergeMap, publish, takeUntil } from 'rxjs/operators';
import { CesiumPureEventObserver } from './cesium-pure-event-observer';
import { CesiumEvent } from '../consts/cesium-event.enum';
export class CesiumLongPressObserver extends CesiumPureEventObserver {
    constructor(event, modifier, eventFactory) {
        super(event, modifier);
        this.event = event;
        this.modifier = modifier;
        this.eventFactory = eventFactory;
    }
    init() {
        let startEvent;
        let stopEvent;
        if (this.event === CesiumEvent.LONG_LEFT_PRESS) {
            startEvent = CesiumEvent.LEFT_DOWN;
            stopEvent = CesiumEvent.LEFT_UP;
        }
        else if (this.event === CesiumEvent.LONG_RIGHT_PRESS) {
            startEvent = CesiumEvent.RIGHT_DOWN;
            stopEvent = CesiumEvent.RIGHT_UP;
        }
        else if (this.event === CesiumEvent.LONG_MIDDLE_PRESS) {
            startEvent = CesiumEvent.MIDDLE_DOWN;
            stopEvent = CesiumEvent.MIDDLE_UP;
        }
        const startEventObservable = this.eventFactory.get(startEvent, this.modifier);
        const stopEventObservable = merge(this.eventFactory.get(stopEvent, this.modifier), this.eventFactory.get(CesiumEvent.MOUSE_MOVE, this.modifier) // Prevent drag mistaken for long press
        );
        // publish for preventing side effect
        const longPressObservable = publish()(startEventObservable.pipe(mergeMap((e) => observableOf(e).pipe(delay(CesiumLongPressObserver.LONG_PRESS_EVENTS_DURATION), takeUntil(stopEventObservable)))));
        return longPressObservable;
    }
}
CesiumLongPressObserver.LONG_PRESS_EVENTS_DURATION = 250;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VzaXVtLWxvbmctcHJlc3Mtb2JzZXJ2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLWNlc2l1bS9zcmMvbGliL2FuZ3VsYXItY2VzaXVtL3NlcnZpY2VzL21hcC1ldmVudHMtbWFuYW5nZXIvZXZlbnQtb2JzZXJ2ZXJzL2Nlc2l1bS1sb25nLXByZXNzLW9ic2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBeUIsS0FBSyxFQUFFLEVBQUUsSUFBSSxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDeEUsT0FBTyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUkxRCxNQUFNLE9BQU8sdUJBQXdCLFNBQVEsdUJBQXVCO0lBR2xFLFlBQXNCLEtBQWtCLEVBQ2xCLFFBQTZCLEVBQy9CLFlBQWdDO1FBQ2xELEtBQUssQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFISCxVQUFLLEdBQUwsS0FBSyxDQUFhO1FBQ2xCLGFBQVEsR0FBUixRQUFRLENBQXFCO1FBQy9CLGlCQUFZLEdBQVosWUFBWSxDQUFvQjtJQUVwRCxDQUFDO0lBRUQsSUFBSTtRQUNGLElBQUksVUFBdUIsQ0FBQztRQUM1QixJQUFJLFNBQXNCLENBQUM7UUFFM0IsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLFdBQVcsQ0FBQyxlQUFlLEVBQUU7WUFDOUMsVUFBVSxHQUFHLFdBQVcsQ0FBQyxTQUFTLENBQUM7WUFDbkMsU0FBUyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUM7U0FDakM7YUFBTSxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssV0FBVyxDQUFDLGdCQUFnQixFQUFFO1lBQ3RELFVBQVUsR0FBRyxXQUFXLENBQUMsVUFBVSxDQUFDO1lBQ3BDLFNBQVMsR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDO1NBQ2xDO2FBQU0sSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLFdBQVcsQ0FBQyxpQkFBaUIsRUFBRTtZQUN2RCxVQUFVLEdBQUcsV0FBVyxDQUFDLFdBQVcsQ0FBQztZQUNyQyxTQUFTLEdBQUcsV0FBVyxDQUFDLFNBQVMsQ0FBQztTQUNuQztRQUVELE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM5RSxNQUFNLG1CQUFtQixHQUFHLEtBQUssQ0FDL0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsRUFDL0MsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsdUNBQXVDO1NBQ3JHLENBQUM7UUFFRixxQ0FBcUM7UUFDckMsTUFBTSxtQkFBbUIsR0FBRyxPQUFPLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQzdELFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDbEMsS0FBSyxDQUFDLHVCQUF1QixDQUFDLDBCQUEwQixDQUFDLEVBQ3pELFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FDbkMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxtQkFBbUIsQ0FBQztJQUM3QixDQUFDOztBQXBDYSxrREFBMEIsR0FBRyxHQUFHLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25uZWN0YWJsZU9ic2VydmFibGUsIG1lcmdlLCBvZiBhcyBvYnNlcnZhYmxlT2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRlbGF5LCBtZXJnZU1hcCwgcHVibGlzaCwgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQ2VzaXVtUHVyZUV2ZW50T2JzZXJ2ZXIgfSBmcm9tICcuL2Nlc2l1bS1wdXJlLWV2ZW50LW9ic2VydmVyJztcbmltcG9ydCB7IENlc2l1bUV2ZW50IH0gZnJvbSAnLi4vY29uc3RzL2Nlc2l1bS1ldmVudC5lbnVtJztcbmltcG9ydCB7IENlc2l1bUV2ZW50TW9kaWZpZXIgfSBmcm9tICcuLi9jb25zdHMvY2VzaXVtLWV2ZW50LW1vZGlmaWVyLmVudW0nO1xuaW1wb3J0IHsgQ2VzaXVtRXZlbnRCdWlsZGVyIH0gZnJvbSAnLi4vY2VzaXVtLWV2ZW50LWJ1aWxkZXInO1xuXG5leHBvcnQgY2xhc3MgQ2VzaXVtTG9uZ1ByZXNzT2JzZXJ2ZXIgZXh0ZW5kcyBDZXNpdW1QdXJlRXZlbnRPYnNlcnZlciB7XG4gIHB1YmxpYyBzdGF0aWMgTE9OR19QUkVTU19FVkVOVFNfRFVSQVRJT04gPSAyNTA7XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGV2ZW50OiBDZXNpdW1FdmVudCxcbiAgICAgICAgICAgICAgcHJvdGVjdGVkIG1vZGlmaWVyOiBDZXNpdW1FdmVudE1vZGlmaWVyLFxuICAgICAgICAgICAgICBwcml2YXRlIGV2ZW50RmFjdG9yeTogQ2VzaXVtRXZlbnRCdWlsZGVyKSB7XG4gICAgc3VwZXIoZXZlbnQsIG1vZGlmaWVyKTtcbiAgfVxuXG4gIGluaXQoKTogQ29ubmVjdGFibGVPYnNlcnZhYmxlPGFueT4ge1xuICAgIGxldCBzdGFydEV2ZW50OiBDZXNpdW1FdmVudDtcbiAgICBsZXQgc3RvcEV2ZW50OiBDZXNpdW1FdmVudDtcblxuICAgIGlmICh0aGlzLmV2ZW50ID09PSBDZXNpdW1FdmVudC5MT05HX0xFRlRfUFJFU1MpIHtcbiAgICAgIHN0YXJ0RXZlbnQgPSBDZXNpdW1FdmVudC5MRUZUX0RPV047XG4gICAgICBzdG9wRXZlbnQgPSBDZXNpdW1FdmVudC5MRUZUX1VQO1xuICAgIH0gZWxzZSBpZiAodGhpcy5ldmVudCA9PT0gQ2VzaXVtRXZlbnQuTE9OR19SSUdIVF9QUkVTUykge1xuICAgICAgc3RhcnRFdmVudCA9IENlc2l1bUV2ZW50LlJJR0hUX0RPV047XG4gICAgICBzdG9wRXZlbnQgPSBDZXNpdW1FdmVudC5SSUdIVF9VUDtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZXZlbnQgPT09IENlc2l1bUV2ZW50LkxPTkdfTUlERExFX1BSRVNTKSB7XG4gICAgICBzdGFydEV2ZW50ID0gQ2VzaXVtRXZlbnQuTUlERExFX0RPV047XG4gICAgICBzdG9wRXZlbnQgPSBDZXNpdW1FdmVudC5NSURETEVfVVA7XG4gICAgfVxuXG4gICAgY29uc3Qgc3RhcnRFdmVudE9ic2VydmFibGUgPSB0aGlzLmV2ZW50RmFjdG9yeS5nZXQoc3RhcnRFdmVudCwgdGhpcy5tb2RpZmllcik7XG4gICAgY29uc3Qgc3RvcEV2ZW50T2JzZXJ2YWJsZSA9IG1lcmdlKFxuICAgICAgdGhpcy5ldmVudEZhY3RvcnkuZ2V0KHN0b3BFdmVudCwgdGhpcy5tb2RpZmllciksXG4gICAgICB0aGlzLmV2ZW50RmFjdG9yeS5nZXQoQ2VzaXVtRXZlbnQuTU9VU0VfTU9WRSwgdGhpcy5tb2RpZmllcikgLy8gUHJldmVudCBkcmFnIG1pc3Rha2VuIGZvciBsb25nIHByZXNzXG4gICAgKTtcblxuICAgIC8vIHB1Ymxpc2ggZm9yIHByZXZlbnRpbmcgc2lkZSBlZmZlY3RcbiAgICBjb25zdCBsb25nUHJlc3NPYnNlcnZhYmxlID0gcHVibGlzaCgpKHN0YXJ0RXZlbnRPYnNlcnZhYmxlLnBpcGUoXG4gICAgICBtZXJnZU1hcCgoZSkgPT4gb2JzZXJ2YWJsZU9mKGUpLnBpcGUoXG4gICAgICAgIGRlbGF5KENlc2l1bUxvbmdQcmVzc09ic2VydmVyLkxPTkdfUFJFU1NfRVZFTlRTX0RVUkFUSU9OKSxcbiAgICAgICAgdGFrZVVudGlsKHN0b3BFdmVudE9ic2VydmFibGUpKSksXG4gICAgKSk7XG4gICAgcmV0dXJuIGxvbmdQcmVzc09ic2VydmFibGU7XG4gIH1cbn1cbiJdfQ==