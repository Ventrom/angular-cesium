import { AcEntity } from '../../angular-cesium/models/ac-entity';
import { EditPoint } from './edit-point';
import { defaultLabelProps } from './label-props';
export class EditableRectangle extends AcEntity {
    constructor(id, pointsLayer, rectangleLayer, coordinateConverter, editOptions, positions) {
        super();
        this.id = id;
        this.pointsLayer = pointsLayer;
        this.rectangleLayer = rectangleLayer;
        this.coordinateConverter = coordinateConverter;
        this.positions = [];
        this.done = false;
        this._enableEdit = true;
        this._labels = [];
        this.defaultPointProps = Object.assign({}, editOptions.pointProps);
        this.rectangleProps = Object.assign({}, editOptions.rectangleProps);
        if (positions && positions.length === 2) {
            this.createFromExisting(positions);
        }
        else if (positions) {
            throw new Error('Rectangle consist of 2 points but provided ' + positions.length);
        }
    }
    get labels() {
        return this._labels;
    }
    set labels(labels) {
        if (!labels) {
            return;
        }
        const positions = this.getRealPositions();
        this._labels = labels.map((label, index) => {
            if (!label.position) {
                label.position = positions[index];
            }
            return Object.assign({}, defaultLabelProps, label);
        });
    }
    get rectangleProps() {
        return this._rectangleProps;
    }
    set rectangleProps(value) {
        this._rectangleProps = value;
    }
    get defaultPointProps() {
        return this._defaultPointProps;
    }
    set defaultPointProps(value) {
        this._defaultPointProps = value;
    }
    get enableEdit() {
        return this._enableEdit;
    }
    set enableEdit(value) {
        this._enableEdit = value;
        this.positions.forEach(point => {
            point.show = value;
            this.updatePointsLayer(point);
        });
    }
    createFromExisting(positions) {
        positions.forEach(position => {
            this.addPointFromExisting(position);
        });
        this.updateRectangleLayer();
        this.updatePointsLayer(...this.positions);
        this.done = true;
    }
    setPointsManually(points, widthMeters) {
        if (!this.done) {
            throw new Error('Update manually only in edit mode, after rectangle is created');
        }
        this.positions.forEach(p => this.pointsLayer.remove(p.getId()));
        this.positions = points;
        this.updatePointsLayer(...points);
        this.updateRectangleLayer();
    }
    addPointFromExisting(position) {
        const newPoint = new EditPoint(this.id, position, this.defaultPointProps);
        this.positions.push(newPoint);
        this.updatePointsLayer(newPoint);
    }
    addPoint(position) {
        if (this.done) {
            return;
        }
        const isFirstPoint = !this.positions.length;
        if (isFirstPoint) {
            const firstPoint = new EditPoint(this.id, position, this.defaultPointProps);
            this.positions.push(firstPoint);
            this.movingPoint = new EditPoint(this.id, position.clone(), this.defaultPointProps);
            this.positions.push(this.movingPoint);
            this.updatePointsLayer(firstPoint);
        }
        else {
            this.updatePointsLayer(...this.positions);
            this.updateRectangleLayer();
            this.done = true;
            this.movingPoint = null;
        }
    }
    movePoint(toPosition, editPoint) {
        if (!editPoint.isVirtualEditPoint()) {
            editPoint.setPosition(toPosition);
            this.updatePointsLayer(...this.positions);
            this.updateRectangleLayer();
        }
    }
    moveShape(startMovingPosition, draggedToPosition) {
        if (!this.lastDraggedToPosition) {
            this.lastDraggedToPosition = startMovingPosition;
        }
        const lastDraggedCartographic = Cesium.Cartographic.fromCartesian(this.lastDraggedToPosition);
        const draggedToPositionCartographic = Cesium.Cartographic.fromCartesian(draggedToPosition);
        this.getRealPoints().forEach(point => {
            const cartographic = Cesium.Cartographic.fromCartesian(point.getPosition());
            cartographic.longitude += (draggedToPositionCartographic.longitude - lastDraggedCartographic.longitude);
            cartographic.latitude += (draggedToPositionCartographic.latitude - lastDraggedCartographic.latitude);
            point.setPosition(Cesium.Cartesian3.fromRadians(cartographic.longitude, cartographic.latitude, 0));
        });
        this.updatePointsLayer(...this.positions);
        this.updateRectangleLayer();
        this.lastDraggedToPosition = draggedToPosition;
    }
    endMoveShape() {
        this.lastDraggedToPosition = undefined;
        this.positions.forEach(point => this.updatePointsLayer(point));
        this.updateRectangleLayer();
    }
    endMovePoint() {
        this.updatePointsLayer(...this.positions);
    }
    moveTempMovingPoint(toPosition) {
        if (this.movingPoint) {
            this.movePoint(toPosition, this.movingPoint);
        }
    }
    removePoint(pointToRemove) {
        this.removePosition(pointToRemove);
        this.positions.filter(p => p.isVirtualEditPoint()).forEach(p => this.removePosition(p));
    }
    addLastPoint(position) {
        this.done = true;
        this.removePosition(this.movingPoint); // remove movingPoint
        this.movingPoint = null;
    }
    getRealPositions() {
        return this.getRealPoints().map(position => position.getPosition());
    }
    getRealPositionsCallbackProperty() {
        return new Cesium.CallbackProperty(this.getRealPositions.bind(this), false);
    }
    getRealPoints() {
        return this.positions.filter(position => !position.isVirtualEditPoint());
    }
    getPositions() {
        return this.positions.map(position => position.getPosition());
    }
    getRectangle() {
        const cartographics = this.getPositions().map(cartesian => Cesium.Cartographic.fromCartesian(cartesian));
        const longitudes = cartographics.map(position => position.longitude);
        const latitudes = cartographics.map(position => position.latitude);
        return new Cesium.Rectangle(Math.min(...longitudes), Math.min(...latitudes), Math.max(...longitudes), Math.max(...latitudes));
    }
    getRectangleCallbackProperty() {
        return new Cesium.CallbackProperty(this.getRectangle.bind(this), false);
    }
    removePosition(point) {
        const index = this.positions.findIndex(p => p === point);
        if (index < 0) {
            return;
        }
        this.positions.splice(index, 1);
        this.pointsLayer.remove(point.getId());
    }
    updatePointsLayer(...point) {
        point.forEach(p => this.pointsLayer.update(p, p.getId()));
    }
    updateRectangleLayer() {
        this.rectangleLayer.update(this, this.id);
    }
    dispose() {
        this.rectangleLayer.remove(this.id);
        this.positions.forEach(editPoint => {
            this.pointsLayer.remove(editPoint.getId());
        });
        if (this.movingPoint) {
            this.pointsLayer.remove(this.movingPoint.getId());
            this.movingPoint = undefined;
        }
        this.positions.length = 0;
    }
    getPointsCount() {
        return this.positions.length;
    }
    getId() {
        return this.id;
    }
}
//# sourceMappingURL=data:application/json;base64,