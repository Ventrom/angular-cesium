import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { EditablePoint } from '../../../models/editable-point';
let PointsManagerService = class PointsManagerService {
    constructor() {
        this.points = new Map();
    }
    createEditablePoint(id, editPointLayer, coordinateConverter, editOptions, position) {
        const editablePoint = new EditablePoint(id, editPointLayer, coordinateConverter, editOptions, position);
        this.points.set(id, editablePoint);
    }
    enableAll() {
        this.points.forEach(point => point.enableEdit = true);
    }
    disableAll() {
        this.points.forEach(point => point.enableEdit = false);
    }
    dispose(id) {
        const point = this.points.get(id);
        if (point.getCurrentPoint()) {
            point.dispose();
        }
        this.points.delete(id);
    }
    get(id) {
        return this.points.get(id);
    }
    clear() {
        this.points.forEach(point => point.dispose());
        this.points.clear();
    }
};
PointsManagerService = __decorate([
    Injectable()
], PointsManagerService);
export { PointsManagerService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9pbnRzLW1hbmFnZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItY2VzaXVtLyIsInNvdXJjZXMiOlsibGliL2FuZ3VsYXItY2VzaXVtLXdpZGdldHMvc2VydmljZXMvZW50aXR5LWVkaXRvcnMvcG9pbnRzLWVkaXRvci9wb2ludHMtbWFuYWdlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUcvRCxJQUFhLG9CQUFvQixHQUFqQyxNQUFhLG9CQUFvQjtJQUFqQztRQUNFLFdBQU0sR0FBK0IsSUFBSSxHQUFHLEVBQXlCLENBQUM7SUF5Q3hFLENBQUM7SUF2Q0MsbUJBQW1CLENBQUMsRUFBVSxFQUNWLGNBQWdDLEVBQ2hDLG1CQUF3QyxFQUN4QyxXQUE4QixFQUM5QixRQUFxQjtRQUN2QyxNQUFNLGFBQWEsR0FBRyxJQUFJLGFBQWEsQ0FDckMsRUFBRSxFQUNGLGNBQWMsRUFDZCxtQkFBbUIsRUFDbkIsV0FBVyxFQUNYLFFBQVEsQ0FBQyxDQUFDO1FBQ1osSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLGFBQWEsQ0FDaEMsQ0FBQztJQUNKLENBQUM7SUFFRCxTQUFTO1FBQ1AsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRCxVQUFVO1FBQ1IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCxPQUFPLENBQUMsRUFBVTtRQUNoQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNsQyxJQUFJLEtBQUssQ0FBQyxlQUFlLEVBQUUsRUFBRTtZQUMzQixLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDakI7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRUQsR0FBRyxDQUFDLEVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRCxLQUFLO1FBQ0gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3RCLENBQUM7Q0FDRixDQUFBO0FBMUNZLG9CQUFvQjtJQURoQyxVQUFVLEVBQUU7R0FDQSxvQkFBb0IsQ0EwQ2hDO1NBMUNZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvb3JkaW5hdGVDb252ZXJ0ZXIgfSBmcm9tICcuLi8uLi8uLi8uLi9hbmd1bGFyLWNlc2l1bS9zZXJ2aWNlcy9jb29yZGluYXRlLWNvbnZlcnRlci9jb29yZGluYXRlLWNvbnZlcnRlci5zZXJ2aWNlJztcbmltcG9ydCB7IEFjTGF5ZXJDb21wb25lbnQgfSBmcm9tICcuLi8uLi8uLi8uLi9hbmd1bGFyLWNlc2l1bS9jb21wb25lbnRzL2FjLWxheWVyL2FjLWxheWVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDYXJ0ZXNpYW4zIH0gZnJvbSAnLi4vLi4vLi4vLi4vYW5ndWxhci1jZXNpdW0vbW9kZWxzL2NhcnRlc2lhbjMnO1xuaW1wb3J0IHsgUG9pbnRFZGl0T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL21vZGVscy9wb2ludC1lZGl0LW9wdGlvbnMnO1xuaW1wb3J0IHsgRWRpdGFibGVQb2ludCB9IGZyb20gJy4uLy4uLy4uL21vZGVscy9lZGl0YWJsZS1wb2ludCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQb2ludHNNYW5hZ2VyU2VydmljZSB7XG4gIHBvaW50czogTWFwPHN0cmluZywgRWRpdGFibGVQb2ludD4gPSBuZXcgTWFwPHN0cmluZywgRWRpdGFibGVQb2ludD4oKTtcblxuICBjcmVhdGVFZGl0YWJsZVBvaW50KGlkOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgZWRpdFBvaW50TGF5ZXI6IEFjTGF5ZXJDb21wb25lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZUNvbnZlcnRlcjogQ29vcmRpbmF0ZUNvbnZlcnRlcixcbiAgICAgICAgICAgICAgICAgICAgICBlZGl0T3B0aW9ucz86IFBvaW50RWRpdE9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24/OiBDYXJ0ZXNpYW4zKSB7XG4gICAgY29uc3QgZWRpdGFibGVQb2ludCA9IG5ldyBFZGl0YWJsZVBvaW50KFxuICAgICAgaWQsXG4gICAgICBlZGl0UG9pbnRMYXllcixcbiAgICAgIGNvb3JkaW5hdGVDb252ZXJ0ZXIsXG4gICAgICBlZGl0T3B0aW9ucyxcbiAgICAgIHBvc2l0aW9uKTtcbiAgICB0aGlzLnBvaW50cy5zZXQoaWQsIGVkaXRhYmxlUG9pbnRcbiAgICApO1xuICB9XG5cbiAgZW5hYmxlQWxsKCkge1xuICAgIHRoaXMucG9pbnRzLmZvckVhY2gocG9pbnQgPT4gcG9pbnQuZW5hYmxlRWRpdCA9IHRydWUpO1xuICB9XG5cbiAgZGlzYWJsZUFsbCgpIHtcbiAgICB0aGlzLnBvaW50cy5mb3JFYWNoKHBvaW50ID0+IHBvaW50LmVuYWJsZUVkaXQgPSBmYWxzZSk7XG4gIH1cblxuICBkaXNwb3NlKGlkOiBzdHJpbmcpIHtcbiAgICBjb25zdCBwb2ludCA9IHRoaXMucG9pbnRzLmdldChpZCk7XG4gICAgaWYgKHBvaW50LmdldEN1cnJlbnRQb2ludCgpKSB7XG4gICAgICBwb2ludC5kaXNwb3NlKCk7XG4gICAgfVxuICAgIHRoaXMucG9pbnRzLmRlbGV0ZShpZCk7XG4gIH1cblxuICBnZXQoaWQ6IHN0cmluZyk6IEVkaXRhYmxlUG9pbnQge1xuICAgIHJldHVybiB0aGlzLnBvaW50cy5nZXQoaWQpO1xuICB9XG5cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5wb2ludHMuZm9yRWFjaChwb2ludCA9PiBwb2ludC5kaXNwb3NlKCkpO1xuICAgIHRoaXMucG9pbnRzLmNsZWFyKCk7XG4gIH1cbn1cbiJdfQ==